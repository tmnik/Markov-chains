% Марковские цепи в форме систем массового обслуживания
clc;
clear variables;

%Исходные данные 
global V a mu lambda p0 t tspan nu mu_1 alfa_1 n
V      = 0.85*1200;                     % км в ч
a      = 50;                       % км
mu     = 1;                       % интенсивность потока обслуживаний, 1/мин  
lambda = 30/60;               % интенсивность потока заявок, 1/мин 
p0     = [1 0 0];                 % вектор начальных условий, считая что при t0 система свободна
t      = (0.0:1.0:20.0)';          % время интегрирования
tspan  = [0 20];               % вектор интервала интегрирования
n      = 2;

%% Расчетная часть
% Параметр "ухода"
nu = V/(a*60);   %с переводом из 1/ч в 1/мин

% Интенсивность пуассоновского потока освобождений 
mu_1   = mu+nu;               %1/мин
alfa_1 = lambda/(mu_1);  %с переводом из 1/ч в 1/мин

% Решение уравнения Чепмена-Колмогарова
options = odeset('RelTol',1e-4,'AbsTol',[1e-4 1e-4 1e-5]);
[t,p]   = ode45(@rigid,tspan, p0,options);

% Характеристики работы радиолокационного комплекса 
p_obs  = 1-p(3);             % вероятность того, что параметры будут измерены 
k      = p_obs*alfa_1;           % среднее число занятых каналов 
pi_z_k = k/n;               % вероятность того, что канал занят 
t_z_k  = 1/mu_1;                     % среднее время занятости канала 
t_n_k  = t_z_k*(1-pi_z_k)/pi_z_k;    % среднее время простоя канала 

t_n_z  = 1/(nu*mu_1);                 % среднее время полной загрузки системы


% Графические результаты решения уравнения Чепмена-Колмагорова
figure(1)
plot(t,p(:,1),'LineWidth',1.8)
hold on;
plot(t,p(:,2),'LineWidth',1.8)
hold on;
plot(t,p(:,3),'LineWidth',1.8)
hold on;
legend(' p_0(t)',' p_1(t)',' p_2(t)','FontSize',30);
title('Графические результаты решения уравнения Чепмена-Колмогорова');
xlabel('t');
ylabel('p');
xlim([0 6]);
ax = gca; 
ax.FontSize = 30;
grid on;
grid minor;


function dp=rigid(t,p)
global  lambda mu_1 
% Уравнение Чепмена-Колмогарова
% Считаем, что p=y

dp = zeros(3,1);
dp(1) = -lambda*p(1)+mu_1*p(2);
dp(2) = -(mu_1+lambda)*p(2)+lambda*p(1)+2*mu_1*p(3);
dp(3) = -2*mu_1*p(3)+lambda*p(2);
end
